package references;

import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;

public class App01 {
    public static void main(String[] args) {
        String title = "Программирование на java"; //сильная ссылка, которая указывает на объект типа String "Программирование на Java",
                                                    // которую сборщик мусора удалит только если она будет null и других ссылок на этот объект не будет

        //разница между слабой ссылкой (WeakReference) и мягкой ссылкой (SoftReference)
        //сборщик мусора в любом случае удалит слабую ссылку, Когда на объект указывает мягкая ссылка, сборщик мусора удалит ее, если будет сильно нуждаться в памяти
        //это дает преимущество мягкой ссылки перед сильной, так как сборщик мусора первым делом удалить мягкую ссылку.
        // Её чаще используют для кэша приложений.

        //WeakReference отлично подходит для хранения метаданных, например для хранения ссылки на ClassLoader

        //Пример WeakReference в Java:
        Student student = new Student(); //какой-то объект

         //слабая ссылка на него
        WeakReference<Student> weakStudent = new WeakReference<Student>(student);

        //теперь объект student может быть собран сборщиком мусора
        student = null;

       // Пример SoftReference в Java:

        Student student1 = new Student();

        SoftReference<Student> softStudent = new SoftReference<>(student1);

        // теперь объект Student может быть собран сборщиком мусора
        // но это случится только в случае сильной необходимости JVM в памяти
        student1 = null;

        //Ссылка PhantomReference в Java
        //PhantomReference может быть собрана сборщиком мусора, если на объект нет сильных (Strong),
        // слабых ссылок (WeakReference) или мягких (SoftReference).
        /**
         * PhantomReference может использоваться в ситуациях, когда использование finalize() не имеет смысла.
         * Этот ссылочный тип отличается от других типов, поскольку он не предназначен для доступа к объекту.
         * Он является сигналом о том, что объект уже финализирован и сборщик мусора готов вернуть свою память.
         *
         * Для этого сборщик мусора помещает его в специальный ReferenceQueue для последующей обработки.
         * ReferenceQueue — это место, куда помещаются ссылки на объекты для освобождение памяти.
         *
         * Фантомные ссылки — это безопасный способ узнать, что объект удален из памяти. Например, рассмотрим приложение,
         * которое имеет дело с большими изображениями. Предположим, что мы хотим загрузить изображение в память,
         * когда оно уже находится в памяти, которая готова для сборки мусора. В этом случае мы хотим подождать
         * пока сборщик мусора убьет старое изображение и только потом загружать в память новое.
         *
         * Здесь PhantomReference является гибким и безопасным выбором. Ссылка на старое изображение будет передана
         * в ReferenceQueue после уничтожения старого объекта изображения.
         * Получив эту ссылку, мы можем загрузить новое изображение в память.
         */
    }
}
